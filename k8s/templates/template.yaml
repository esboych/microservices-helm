apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{ .clusterSubdomain }}.k8s.local
spec:
#  version is fixed on 1.4.0 which lacks RBAC
#  addons:
#    - manifest: ingress-nginx
  hooks:
    - manifest: |
        [Unit]
        Description=Create example user
        ConditionPathExists=!/home/example/.ssh/authorized_keys

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c 'useradd example && echo "{{ .examplePublicKey }}" > /home/example/.ssh/authorized_keys'
      name: useradd-example.service
      roles:
        - Node
        - Master
    - manifest: |
        Type=oneshot
        ExecStart=/usr/bin/coreos-cloudinit --from-file=/home/core/cloud-config.yaml
      name: reboot-window.service
      roles:
        - Node
        - Master
  kubeAPIServer:
    #authorizationRbacSuperUser: admin
    featureGates:
      TaintBasedEvictions: "true"
  kubeControllerManager:
    featureGates:
      TaintBasedEvictions: "true"
    horizontalPodAutoscalerUseRestClients: false
  kubeScheduler:
    featureGates:
      TaintBasedEvictions: "true"
  kubelet:
    featureGates:
      TaintBasedEvictions: "true"
  fileAssets:
    - content: |
        yes
      name: docker-1.12
      path: /etc/coreos/docker-1.12
      roles:
        - Node
        - Master
    - content: |
        #cloud-config
        coreos:
          update:
            reboot-strategy: "etcd-lock"
          locksmith:
            window-start: {{ .locksmith.windowStart }}
            window-length: {{ .locksmith.windowLength }}
      name: cloud-config.yaml
      path: /home/core/cloud-config.yaml
      roles:
        - Node
        - Master
  api:
    loadBalancer:
      type: Public
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{ .s3Bucket }}/{{ .clusterSubdomain }}.k8s.local
  etcdClusters:
    - etcdMembers:
        - instanceGroup: master-{{ .zone }}
          name: a
      name: main
    - etcdMembers:
        - instanceGroup: master-{{ .zone }}
          name: a
      name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubernetesApiAccess:
    - {{ .apiAccessCidr }}
  kubernetesVersion: {{ .k8sVersion }}
  masterPublicName: api.{{ .clusterSubdomain }}.k8s.local
  networkCIDR: {{ .vpcCidr }}
  networking:
    canal: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
    - {{ .sshAccessCidr }}
  subnets:
    - cidr: {{ .subnetCidr }}
      name: {{ .zone }}
      type: Public
      zone: {{ .zone }}
  topology:
    dns:
      type: Public
    masters: public
    nodes: public
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{ .clusterSubdomain }}.k8s.local
  name: master-{{ .zone }}
spec:
  image: {{ .image }}
  machineType: {{ .awsMachineTypeMaster }}
  maxSize: 1
  minSize: 1
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{ .zone }}
  role: Master
  subnets:
    - {{ .zone }}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  name: ag.{{ .clusterSubdomain }}.k8s.local
  labels:
    kops.k8s.io/cluster: {{ .clusterSubdomain }}.k8s.local
spec:
  image: {{ .image }}
  machineType: {{ .awsMachineTypeAg }}
  maxSize: 10
  minSize: 1
  nodeLabels:
    kops.k8s.io/instancegroup: ag.{{ .clusterSubdomain }}.k8s.local
  role: Node
  subnets:
    - {{ .zone }}